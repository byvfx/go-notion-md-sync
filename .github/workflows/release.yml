name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Set binary name
      id: binary
      run: |
        BINARY_NAME=notion-md-sync
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        echo "name=${BINARY_NAME}" >> $GITHUB_OUTPUT
        echo "archive=notion-md-sync-${{ matrix.goos }}-${{ matrix.goarch }}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build -ldflags="-s -w" -o ${{ steps.binary.outputs.name }} ./cmd/notion-md-sync

    - name: Create archive
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip ${{ steps.binary.outputs.archive }}.zip ${{ steps.binary.outputs.name }}
        else
          tar -czf ${{ steps.binary.outputs.archive }}.tar.gz ${{ steps.binary.outputs.name }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.binary.outputs.archive }}
        path: |
          ${{ steps.binary.outputs.archive }}.zip
          ${{ steps.binary.outputs.archive }}.tar.gz

  create-release:
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Get version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Read release notes
      id: release_notes
      run: |
        RELEASE_FILE="docs/releases/${{ steps.version.outputs.version }}.md"
        if [ -f "$RELEASE_FILE" ]; then
          # Extract content after the first heading
          CONTENT=$(sed '1,/^#/d' "$RELEASE_FILE")
          # GitHub Actions requires special handling for multiline strings
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "body=No release notes found for ${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/notion-md-sync-*.tar.gz
          **/notion-md-sync-*.zip
        body: ${{ steps.release_notes.outputs.body }}
        draft: false
        prerelease: false